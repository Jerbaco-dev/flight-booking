{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport let PassengerService = /*#__PURE__*/(() => {\n  class PassengerService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `findPassenger$Plain()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    findPassenger$Plain$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\n\n      if (params) {\n        rb.query('email', params.email, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: 'text/plain'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `findPassenger$Plain$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    findPassenger$Plain(params) {\n      return this.findPassenger$Plain$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `findPassenger()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    findPassenger$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PassengerService.FindPassengerPath, 'get');\n\n      if (params) {\n        rb.query('email', params.email, {});\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'text/json'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `findPassenger$Response()` instead.\r\n     *\r\n     * This method doesn't expect any request body.\r\n     */\n\n\n    findPassenger(params) {\n      return this.findPassenger$Response(params).pipe(map(r => r.body));\n    }\n    /**\r\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n     * To access only the response body, use `registerPassenger()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    registerPassenger$Response(params) {\n      const rb = new RequestBuilder(this.rootUrl, PassengerService.RegisterPassengerPath, 'post');\n\n      if (params) {\n        rb.body(params.body, 'application/*+json');\n      }\n\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*'\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\r\n     * This method provides access to only to the response body.\r\n     * To access the full response (for headers, for example), `registerPassenger$Response()` instead.\r\n     *\r\n     * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n     */\n\n\n    registerPassenger(params) {\n      return this.registerPassenger$Response(params).pipe(map(r => r.body));\n    }\n\n  }\n\n  /**\r\n   * Path part for operation findPassenger\r\n   */\n  PassengerService.FindPassengerPath = '/Passenger';\n  /**\r\n   * Path part for operation registerPassenger\r\n   */\n\n  PassengerService.RegisterPassengerPath = '/Passenger';\n\n  PassengerService.ɵfac = function PassengerService_Factory(t) {\n    return new (t || PassengerService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  PassengerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PassengerService,\n    factory: PassengerService.ɵfac,\n    providedIn: 'root'\n  });\n  return PassengerService;\n})();","map":null,"metadata":{},"sourceType":"module"}